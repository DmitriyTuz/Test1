но в конце у тебя должно получится

1) поднятый сервер на 3000 порту         +
2) база данных с 1 таблицей (User)       +
3) CRUD ендпоинты на данную таблицу      +
4) и можно еще авторизацию прикрутить    +

5) должно быть 3 таблицы - авторы, книги, юзеры;    +
6) cделать CRUD для этих таблиц;                    +
7) реализовать возможность юзера брать и возвращать книги;  -
4) (см. выше) сделать авторизацию пользователя (любую) - логин и пароль;   +

8) реализовать поиск юзеров по имени      +
9) по Id                                  +
10) поиск книг по автору или по имени     +
11) можешь сделать ещё фильтр по дате
    добавления книг в библиотеку
12) или фильтр задолжников т.е. функция
    которая вернёт тебе юзеров которые взяли
    книги допустим неделю назад и не вернули

создать интернет-магазин

1) реализовать поиск рейтинга по id (sequelize/SQl); +
2) ... по Id юзера и Id девайса(sequelize/SQl); +
3) ... по оценке(sequelize/SQl); +
4) изменить rate по Id юзера и Id девайса(sequelize/SQl); +
5) реализовать то что юзер может ставить только одну оценку девайсу; +
6) реализовать корзину ... вытянуть баскет с девайсами (это для просмотра того что в корзине); +
7) кнопка - добавить девайс в корзину; +
8) ... - удалить девайс из корзины; +
9) ... полной очистки корзины; +
10) ... функцию создания характеристик девайсов (поле info); +
11) ... ф-ю изменения характеристик девайсов; +
12) ... функцию сброса пароля (простая замена пароля без проверочного письма на почту); +
13) ... поиск юзера по части от email; +
14) (БОЛЬШОЕ ЗАДАНИЕ 1) ... (замена пароля с проверочным письмом на почту); +
15) (БОЛЬШОЕ ЗАДАНИЕ 2) - сделать чат:
                                       # реализовать сохранение юзера в комнате; +
                                       # реализовать сохранение сообщений в базе; +
                                       # разобраться с useState и set (инициализация и присвоение переменной на фронте); +
                                       # разобраться с required (в include) - user_functions строка 107; +
                                       # реализовать создание юзера если его нет с данным е-мейлом в базе (чтобы не стирать по 100 раз); +
                                       # создать роут для нахождения сообщения в базе и кто его создал; +


17) (БОЛЬШОЕ ЗАДАНИЕ 3) - # перенести данные из Mongo в Postgresql (миграции); +
                          # .... обратно; +

18) разобраться с обработкой ошибок; +
19) переделать всё на классах; +
20) сделать каждую модель отдельным файлом; +
21) рефакторинг проекта интернет-магазин используя миграции (изначально использовался метод Sync); +
22) создать тестовый файл test.js для проверки миграций; +
23) разобраться как пушить и деплоить на Heroku; +
24) запушить и задеплоить проект на Heroku; +
25) установить и попрактиковаться с ОС ubuntu; +
26) перенести проект IntShop и IntChat на ubuntu; +
27) поиграться с dot.env; +
28) переделать криды через dotenv (для безопастности) и для локала и для продакшина (heroku); +
29) добавить 2ю базу данных mongo к проекту развёрнутому на heroku; +
30) разобраться с Docker; +
31) подключить свой проект через Docker; (сделал бэк-часть; c фронтом возникли трудности надо гуглить и возиться) +/-
32) ознакомиться с системой оплаты Stripe; +
33) (БОЛЬШОЕ ЗАДАНИЕ 4) подключить систему оплаты Stripe к интернет-магазину; (слишком много фронта) -
34) разобраться с Radis; +/-
35) сделать тестовое задание; *
36) написать резюме; +
37) подправить резюме;
38) разобраться что такое дамп данных и как его делать; +/-
39) задачи для собесов (Владилен); *

по тестовому ! :
40) проверять есть ли userId; +
41) задать чтобы id стартовал с 10000; +
42) поменять UserId и Comments на userId и comments; +
43) отсортировать Comments по id; +
44) обработать ошибки; +
45) разобраться с тестами; +
46) написать файл readme.txt по тестовому; +